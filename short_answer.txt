Before submitting this file, make sure that there are no more TODO
placeholders remaining in the file (and remove this comment too).

Perfect Numbers
---------------

Before submitting this file, make sure that there are no more TODO
placeholders remaining in the file (and remove this comment too).

Q1. Roughly how long did it take your computer to do the search? How many perfect numbers were found and what were they?
A1. The program consumed about 2.85 s to search perfect numbers between 0 to 40,000 (intel i5 9400), and four perfect numbers
    were found. They are 6, 28, 496, and 8128, respectively.

Q2. Record the timing results for `findPerfects` that you observed into a table.
A2. Test Number     Time
    25,000          0.920
    50,000          3.109
    100,000         11.87
    200,000         47.142

Q3. Does it take the same amount of work to compute `isPerfect` on the number 10 as it does on the number 1000? Why or why not? Does it take the same amount of work for `findPerfects` to search the range of numbers from 1-1000 as it does to search the numbers from 1000-2000? Why or why not?
A3. The case that test number is 1000 took more work to execute the 'isPerfect' function compared to the case of only 10 test numbers.
    Because more computations were performed in the 'for' loop of 'isPerfect' function. However, It takes almost the same
    amount of work for `findPerfects` to search the range of numbers from 1-1000 and 1000-2000.

Q4. Extrapolate from the data you gathered and make a prediction: how long will it take `findPerfects` to reach the fifth perfect number?
A4. The `findPerfects` funtion will take 1,369,257 seconds(about 15.8 days) to reach the fifth perfect number according to my prediction.

Q5. Do any of the tests still pass even with this broken function? Why or why not?
A5. The test of EXPECT(!isPerfect(12)), EXPECT(!isPerfect(98765)), and TIME_OPERATION(x, findPerfects(x)) were passed though the 'divisorSum'
    function is broken. Becaue the program can still be compiled successfully when the initial value of 'total' change to 1
    even though the results are no longer correct.

Q6. Describe the testing strategy you used for your test cases to confirm `smarterSum` is working correctly.
A6. TODO

Q7. Record your timing results for `findPerfectsSmarter` into a table.
A7. TODO

Q8. Make a prediction: how long will `findPerfectsSmarter` take to reach the fifth perfect number?
A8. TODO

Q9. Explain how you chose your specific test cases and why they lead you to be confident `findNthPerfectEuclid` is working correctly.
A9. TODO

Soundex
-------

Q10. What is the Soundex code for "Angelou"? What is the code for your own surname?
A10. TODO

Q11. Before writing any code, brainstorm your plan of attack and sketch how you might decompose the work into smaller tasks. Briefly describe your decomposition strategy.
A11. TODO

Q12. Think about one or more examples of a class of names that the Soundex system might not work well for. Explain what this class of names is and why the system might incorrectly group them or mis-categorize one of the names.
A12. TODO

Q13. Suppose you are a software engineer working for the U.S. government. You have been tasked with implementing a system that collects names as part of the Census survey and analyzes these names using a phonetic algorithm. Your boss suggests using Soundex and notes that the algorithm is only expected to work for ASCII-encoded strings, since supporting Unicode would require extra work and time. What would your response be and why? What representational harms might result from building a system that exclusively uses Soundex and/or ASCII?
A13. TODO


